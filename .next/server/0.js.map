{"version":3,"file":"0.js","sources":["webpack:///./components/Drawer/Drawer.tsx","webpack:///./containers/LayoutContainer/Header/MobileDrawer.tsx","webpack:///./containers/LayoutContainer/Header/MobileHeader.tsx","webpack:///./contexts/drawer/drawer.context.tsx","webpack:///./contexts/drawer/drawer.provider.tsx","webpack:///./helper/debounce.ts","webpack:///./helper/useComponentSize.js"],"sourcesContent":["import React, { Fragment } from 'react';\r\nimport RcDrawer from 'rc-drawer';\r\n\r\ntype DrawerProps = {\r\n  className?: string;\r\n  children?: any;\r\n  closeButton?: any;\r\n  closeButtonStyle?: any;\r\n  drawerHandler: any;\r\n  toggleHandler: any;\r\n  open: any;\r\n  width?: string;\r\n  placement?: 'left' | 'right' | 'top' | 'bottom';\r\n};\r\n\r\nconst Drawer: React.FunctionComponent<DrawerProps> = ({\r\n  className,\r\n  children,\r\n  closeButton,\r\n  closeButtonStyle,\r\n  drawerHandler,\r\n  toggleHandler,\r\n  open,\r\n  width,\r\n  placement,\r\n  ...props\r\n}) => {\r\n  return (\r\n    <Fragment>\r\n      <RcDrawer\r\n        open={open}\r\n        onClose={toggleHandler}\r\n        className={`drawer ${className ? className : ''}`.trim()}\r\n        width={width}\r\n        placement={placement}\r\n        handler={false}\r\n        level={null}\r\n        duration=\".4s\"\r\n        {...props}\r\n      >\r\n        {closeButton && (\r\n          <div\r\n            className=\"drawer__close\"\r\n            onClick={toggleHandler}\r\n            style={closeButtonStyle}\r\n          >\r\n            {closeButton}\r\n          </div>\r\n        )}\r\n\r\n        {children}\r\n      </RcDrawer>\r\n      <div\r\n        className=\"drawer__handler\"\r\n        style={{ display: 'inline-block' }}\r\n        onClick={toggleHandler}\r\n      >\r\n        {drawerHandler}\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nDrawer.defaultProps = {\r\n  width: '300px',\r\n  placement: 'left',\r\n};\r\n\r\nexport default Drawer;\r\n","import React, { useContext } from 'react';\r\nimport { openModal } from '@redq/reuse-modal';\r\nimport Router from 'next/router';\r\nimport { Scrollbars } from 'react-custom-scrollbars';\r\nimport Drawer from 'components/Drawer/Drawer';\r\nimport Button from 'components/Button/Button';\r\nimport NavLink from 'components/NavLink/NavLink';\r\nimport { CloseIcon } from 'components/AllSvgIcon';\r\nimport { DrawerContext } from 'contexts/drawer/drawer.context';\r\nimport { AuthContext } from 'contexts/auth/auth.context';\r\nimport AuthenticationForm from '../../SignInOutForm/Form';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport {\r\n  HamburgerIcon,\r\n  DrawerContentWrapper,\r\n  DrawerClose,\r\n  DrawerProfile,\r\n  LogoutView,\r\n  LoginView,\r\n  UserAvatar,\r\n  UserDetails,\r\n  DrawerMenu,\r\n  DrawerMenuItem,\r\n  UesrOptionMenu,\r\n} from './Header.style';\r\nimport UserImage from 'image/user.jpg';\r\n\r\nimport {\r\n  PROCEED_TO_CHECKOUT_PAGE,\r\n  ALTERNATIVE_CHECKOUT_PAGE,\r\n  PROFILE_PAGE,\r\n  YOUR_ORDER,\r\n  ORDER_RECEIVED,\r\n  HELP_PAGE,\r\n  OFFER_PAGE,\r\n} from 'constants/navigation';\r\n\r\nconst DrawerMenuItems = [\r\n  {\r\n    id: 1,\r\n    intlLabelId: 'navLinkHome',\r\n    label: 'Home',\r\n    href: '/',\r\n  },\r\n  {\r\n    id: 2,\r\n    intlLabelId: 'navlinkCheckout',\r\n    label: 'Checkout',\r\n    href: PROCEED_TO_CHECKOUT_PAGE,\r\n  },\r\n  {\r\n    id: 3,\r\n    label: 'Checkout Second',\r\n    intlLabelId: 'alternativeCheckout',\r\n    href: ALTERNATIVE_CHECKOUT_PAGE,\r\n  },\r\n  {\r\n    id: 4,\r\n    intlLabelId: 'navlinkProfile',\r\n    label: 'Profile',\r\n    href: PROFILE_PAGE,\r\n  },\r\n  {\r\n    id: 5,\r\n    intlLabelId: 'sidebarYourOrder',\r\n    label: 'Order',\r\n    href: YOUR_ORDER,\r\n  },\r\n  {\r\n    id: 6,\r\n    intlLabelId: 'navlinkOrderReceived',\r\n    label: 'Received',\r\n    href: ORDER_RECEIVED,\r\n  },\r\n  {\r\n    id: 7,\r\n    intlLabelId: 'navlinkHelp',\r\n    label: 'Help',\r\n    href: HELP_PAGE,\r\n  },\r\n  {\r\n    id: 8,\r\n    intlLabelId: 'navlinkOffer',\r\n    label: 'Offer',\r\n    href: OFFER_PAGE,\r\n  },\r\n];\r\n\r\nconst MobileDrawer: React.FunctionComponent = () => {\r\n  const { state, dispatch } = useContext<any>(DrawerContext);\r\n  const {\r\n    authState: { isAuthenticated },\r\n    authDispatch,\r\n  } = useContext<any>(AuthContext);\r\n  // Toggle drawer\r\n  const toggleHandler = React.useCallback(() => {\r\n    dispatch({\r\n      type: 'TOGGLE',\r\n    });\r\n  }, [dispatch]);\r\n\r\n  const handleLogout = () => {\r\n    if (typeof window !== 'undefined') {\r\n      localStorage.removeItem('access_token');\r\n      authDispatch({ type: 'SIGN_OUT' });\r\n      Router.push('/');\r\n    }\r\n  };\r\n  const resetSearch = () => {\r\n    dispatch({\r\n      type: 'RESET',\r\n    });\r\n  };\r\n\r\n  const signInOutForm = () => {\r\n    dispatch({\r\n      type: 'TOGGLE',\r\n    });\r\n\r\n    authDispatch({\r\n      type: 'SIGNIN',\r\n    });\r\n\r\n    openModal({\r\n      show: true,\r\n      overlayClassName: 'quick-view-overlay',\r\n      closeOnClickOutside: true,\r\n      component: AuthenticationForm,\r\n      closeComponent: '',\r\n      config: {\r\n        enableResizing: false,\r\n        disableDragging: true,\r\n        className: 'quick-view-modal',\r\n        width: 458,\r\n        height: 'auto',\r\n      },\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Drawer\r\n      width='316px'\r\n      drawerHandler={\r\n        <HamburgerIcon>\r\n          <span />\r\n          <span />\r\n          <span />\r\n        </HamburgerIcon>\r\n      }\r\n      open={state.isOpen}\r\n      toggleHandler={toggleHandler}\r\n      closeButton={\r\n        <DrawerClose>\r\n          <CloseIcon />\r\n        </DrawerClose>\r\n      }\r\n    >\r\n      <Scrollbars autoHide>\r\n        <DrawerContentWrapper>\r\n          <DrawerProfile>\r\n            {isAuthenticated ? (\r\n              <LoginView>\r\n                <UserAvatar>\r\n                  <img src={UserImage} alt='user_avatar' />\r\n                </UserAvatar>\r\n                <UserDetails>\r\n                  <h3>David Kinderson</h3>\r\n                  <span>+990 374 987</span>\r\n                </UserDetails>\r\n              </LoginView>\r\n            ) : (\r\n              <LogoutView>\r\n                <Button\r\n                  intlButtonId='mobileSignInButtonText'\r\n                  title='Join In'\r\n                  size='small'\r\n                  className='sign_in'\r\n                  // variant=\"primary\"\r\n                  onClick={signInOutForm}\r\n                />\r\n              </LogoutView>\r\n            )}\r\n          </DrawerProfile>\r\n\r\n          <DrawerMenu>\r\n            {DrawerMenuItems.map((item) => (\r\n              <DrawerMenuItem key={item.id}>\r\n                <NavLink\r\n                  onClick={toggleHandler}\r\n                  href={item.href}\r\n                  label={item.label}\r\n                  intlId={item.intlLabelId}\r\n                  className='drawer_menu_item'\r\n                />\r\n              </DrawerMenuItem>\r\n            ))}\r\n          </DrawerMenu>\r\n\r\n          {isAuthenticated && (\r\n            <UesrOptionMenu>\r\n              <DrawerMenuItem>\r\n                <NavLink\r\n                  href='/profile'\r\n                  label='Your Account Settings'\r\n                  className='drawer_menu_item'\r\n                  intlId='navlinkAccountSettings'\r\n                />\r\n              </DrawerMenuItem>\r\n              <DrawerMenuItem>\r\n                <div onClick={handleLogout} className='drawer_menu_item'>\r\n                  <span className='logoutBtn'>\r\n                    <FormattedMessage\r\n                      id='navlinkLogout'\r\n                      defaultMessage='Logout'\r\n                    />\r\n                  </span>\r\n                </div>\r\n              </DrawerMenuItem>\r\n            </UesrOptionMenu>\r\n          )}\r\n        </DrawerContentWrapper>\r\n      </Scrollbars>\r\n    </Drawer>\r\n  );\r\n};\r\n\r\nexport default MobileDrawer;\r\n","import React, { useState, useContext } from 'react';\r\nimport { useRouter } from 'next/router';\r\nimport { openModal, closeModal } from '@redq/reuse-modal';\r\nimport { DrawerProvider } from 'contexts/drawer/drawer.provider';\r\nimport MobileDrawer from './MobileDrawer';\r\nimport {\r\n  MobileHeaderWrapper,\r\n  MobileHeaderInnerWrapper,\r\n  DrawerWrapper,\r\n  LogoWrapper,\r\n  SearchWrapper,\r\n  SearchModalWrapper,\r\n  SearchModalClose,\r\n} from './Header.style';\r\nimport SearchBox from 'components/SearchBox/SearchBox';\r\nimport { SearchContext } from 'contexts/search/search.context';\r\nimport { HeaderContext } from 'contexts/header/header.context';\r\nimport LogoImage from 'image/logo.svg';\r\n\r\nimport { SearchIcon, LongArrowLeft } from 'components/AllSvgIcon';\r\nimport Logo from 'components/Logo/Logo';\r\nimport LanguageSwitcher from './Menu/LanguageSwitcher/LanguageSwitcher';\r\nimport { isCategoryPage } from '../is-home-page';\r\nimport useDimensions from 'helper/useComponentSize';\r\n\r\ntype MobileHeaderProps = {\r\n  className?: string;\r\n  pathname?: string;\r\n  closeSearch?: any;\r\n};\r\ntype SearchModalProps = {\r\n  state?: any;\r\n  handleSearch?: any;\r\n  pathname?: string;\r\n};\r\n\r\nconst SearchModal: React.FC<SearchModalProps> = ({\r\n  state,\r\n  pathname,\r\n  handleSearch,\r\n}) => {\r\n  const router = useRouter();\r\n  const [text, setText] = useState(state.text || '');\r\n  const handleSearchInput = (text: string) => {\r\n    setText(text);\r\n  };\r\n  const { page, ...urlState } = state;\r\n\r\n  const handleClickSearchButton = () => {\r\n    handleSearch(text);\r\n    router.push({\r\n      pathname: pathname,\r\n      query: {\r\n        ...urlState,\r\n        text,\r\n      },\r\n    });\r\n    closeModal();\r\n  };\r\n  return (\r\n    <SearchModalWrapper>\r\n      <SearchModalClose type='submit' onClick={() => closeModal()}>\r\n        <LongArrowLeft />\r\n      </SearchModalClose>\r\n      <SearchBox\r\n        className='header-modal-search'\r\n        bordered={false}\r\n        inputStyle={{ height: 35 }}\r\n        buttonText=''\r\n        placeholder='Search'\r\n        handleSearch={handleSearchInput}\r\n        value={text}\r\n        onClick={handleClickSearchButton}\r\n        pathname={pathname}\r\n      />\r\n    </SearchModalWrapper>\r\n  );\r\n};\r\n\r\nconst MobileHeader: React.FC<MobileHeaderProps> = ({ className, pathname }) => {\r\n  const { state, dispatch } = useContext(SearchContext);\r\n\r\n  const [mobileHeaderRef, dimensions] = useDimensions();\r\n  const { headerDispatch } = useContext<any>(HeaderContext);\r\n\r\n  const headerHeight = dimensions.height;\r\n\r\n  React.useEffect(() => {\r\n    headerDispatch({\r\n      type: 'GET_MOBILE_HEIGHT',\r\n      payload: {\r\n        ...state,\r\n        mobileHeight: headerHeight,\r\n      },\r\n    });\r\n  }, [headerHeight]);\r\n\r\n  const handleSearch = (text: string) => {\r\n    dispatch({\r\n      type: 'UPDATE',\r\n      payload: {\r\n        ...state,\r\n        text,\r\n      },\r\n    });\r\n  };\r\n  const handleSearchModal = () => {\r\n    openModal({\r\n      show: true,\r\n      config: {\r\n        enableResizing: false,\r\n        disableDragging: true,\r\n        className: 'search-modal-mobile',\r\n        width: '100%',\r\n        height: '100%',\r\n      },\r\n      closeOnClickOutside: false,\r\n      component: SearchModal,\r\n      componentProps: { state, pathname, handleSearch },\r\n      closeComponent: () => <div />,\r\n    });\r\n  };\r\n\r\n  const isHomePage = isCategoryPage(pathname);\r\n\r\n  return (\r\n    <DrawerProvider>\r\n      <MobileHeaderWrapper>\r\n        <MobileHeaderInnerWrapper className={className} ref={mobileHeaderRef}>\r\n          <DrawerWrapper>\r\n            <MobileDrawer />\r\n          </DrawerWrapper>\r\n\r\n          <LogoWrapper>\r\n            <Logo imageUrl={LogoImage} alt='shop logo' />\r\n          </LogoWrapper>\r\n\r\n          <LanguageSwitcher />\r\n\r\n          {isHomePage ? (\r\n            <SearchWrapper\r\n              onClick={handleSearchModal}\r\n              className='searchIconWrapper'\r\n            >\r\n              <SearchIcon />\r\n            </SearchWrapper>\r\n          ) : null}\r\n        </MobileHeaderInnerWrapper>\r\n      </MobileHeaderWrapper>\r\n    </DrawerProvider>\r\n  );\r\n};\r\n\r\nexport default MobileHeader;\r\n","import { createContext } from 'react';\r\n\r\nexport const DrawerContext = createContext({});\r\n","import React, { useReducer } from 'react';\r\nimport { DrawerContext } from './drawer.context';\r\nconst initialState = {\r\n  isOpen: false,\r\n};\r\n\r\nfunction reducer(state: any, action: any) {\r\n  switch (action.type) {\r\n    case 'TOGGLE':\r\n      return {\r\n        ...state,\r\n        isOpen: !state.isOpen,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\nexport const DrawerProvider: React.FunctionComponent = ({ children }) => {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n  return (\r\n    <DrawerContext.Provider value={{ state, dispatch }}>\r\n      {children}\r\n    </DrawerContext.Provider>\r\n  );\r\n};\r\n","function debounce(func, wait, immediate) {\r\n  let timeout;\r\n\r\n  return function executedFunction(...args) {\r\n    const context = this;\r\n    const later = function() {\r\n      timeout = null;\r\n      if (!immediate) func.apply(context, args);\r\n    };\r\n\r\n    const callNow = immediate && !timeout;\r\n\r\n    clearTimeout(timeout);\r\n\r\n    timeout = setTimeout(later, wait);\r\n\r\n    if (callNow) func.apply(context, args);\r\n  };\r\n}\r\n\r\nexport default debounce;\r\n","import { useState, useCallback, useEffect } from 'react';\r\nimport debounce from './debounce'; // maybe use a hook instead?\r\n\r\nfunction useDimensions(\r\n  liveMeasure = true,\r\n  delay = 250,\r\n  initialDimensions = {}\r\n) {\r\n  const [dimensions, setDimensions] = useState(initialDimensions);\r\n  const [node, setNode] = useState(null);\r\n\r\n  const ref = useCallback(newNode => {\r\n    setNode(newNode);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // need ref to continue\r\n    if (!node) {\r\n      return;\r\n    }\r\n\r\n    const measure = () => {\r\n      window.requestAnimationFrame(() => {\r\n        const newDimensions = node.getBoundingClientRect();\r\n        setDimensions(newDimensions);\r\n      });\r\n    };\r\n    // invoke measure right away\r\n    measure();\r\n\r\n    if (liveMeasure) {\r\n      const debounceMeasure = debounce(measure, delay);\r\n\r\n      if ('ResizeObserver' in window) {\r\n        const resizeObserver = new ResizeObserver(debounceMeasure);\r\n        resizeObserver.observe(node);\r\n        window.addEventListener('scroll', debounceMeasure);\r\n\r\n        return () => {\r\n          resizeObserver.disconnect();\r\n          window.removeEventListener('scroll', debounceMeasure);\r\n        };\r\n      }\r\n      window.addEventListener('resize', debounceMeasure);\r\n      window.addEventListener('scroll', debounceMeasure);\r\n\r\n      return () => {\r\n        window.removeEventListener('resize', debounceMeasure);\r\n        window.removeEventListener('scroll', debounceMeasure);\r\n      };\r\n    }\r\n  }, [node, liveMeasure, delay]);\r\n\r\n  return [ref, dimensions, node];\r\n}\r\n\r\nexport default useDimensions;\r\n\r\n// Usage\r\n\r\n// function App() {\r\n//   const [wrapperRef, dimensions] = useDimensions();\r\n\r\n//   return (\r\n//     <div ref={wrapperRef}>\r\n//       height: {dimensions.height}\r\n//       width: {dimensions.width}\r\n//     </div>\r\n//   );\r\n// }\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAaA;AAWA;AAVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AAAA;AAAA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AACA;AACA;AAFA;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAaA;AAEA;AAUA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAJA;AACA;AAOA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAFA;AACA;AAIA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA,iBAIA;AACA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AADA;AAIA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AANA;AAcA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiaA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClOA;AACA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAYA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAFA;AAFA;AAOA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAFA;AAFA;AAOA;AACA;AACA;AACA;AACA;AACA;AAEA;AAFA;AAFA;AAOA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAZA;AAcA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;;;;;;;;;;;;ACzJA;AAAA;AAAA;AAAA;AAAA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;ACFA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AAEA;AAFA;AACA;AAGA;AACA;AAPA;AASA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;;;;;;;;;;ACxBA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACpBA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAKA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}