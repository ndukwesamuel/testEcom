{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\pickbazar\\\\packages\\\\shop\\\\components\\\\Input\\\\Input.tsx\";\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, Fragment } from 'react';\nimport InputWrapper, { VerifiedLabel, VerificationButton } from './Input.style';\nimport { FormattedMessage } from 'react-intl';\n\nvar Input = function Input(_ref) {\n  var type = _ref.type,\n      value = _ref.value,\n      label = _ref.label,\n      name = _ref.name,\n      style = _ref.style,\n      disabled = _ref.disabled,\n      className = _ref.className,\n      onUpdate = _ref.onUpdate,\n      placeholder = _ref.placeholder,\n      intlPlaceholderId = _ref.intlPlaceholderId,\n      intlInputLabelId = _ref.intlInputLabelId,\n      onBlur = _ref.onBlur,\n      onFocus = _ref.onFocus,\n      verification = _ref.verification,\n      verified = _ref.verified,\n      handleVerification = _ref.handleVerification,\n      secondaryComponent = _ref.secondaryComponent,\n      searchIcon = _ref.searchIcon,\n      iconPosition = _ref.iconPosition,\n      containerStyle = _ref.containerStyle,\n      rest = _objectWithoutProperties(_ref, [\"type\", \"value\", \"label\", \"name\", \"style\", \"disabled\", \"className\", \"onUpdate\", \"placeholder\", \"intlPlaceholderId\", \"intlInputLabelId\", \"onBlur\", \"onFocus\", \"verification\", \"verified\", \"handleVerification\", \"secondaryComponent\", \"searchIcon\", \"iconPosition\", \"containerStyle\"]);\n\n  // Input State\n  var _useState = useState({\n    value: value\n  }),\n      state = _useState[0],\n      setState = _useState[1]; // Add all classs to an array\n\n\n  var addAllClasses = ['field-wrapper']; // className prop checking\n\n  if (className) {\n    addAllClasses.push(className);\n  } // Add disabled class\n\n\n  if (disabled) {\n    addAllClasses.push('disabled');\n  } // Add with search icon class\n\n\n  if (searchIcon) {\n    addAllClasses.push('with-search-icon');\n  }\n\n  if (verification) {\n    verified ? addAllClasses.push('number-verified') : addAllClasses.push('send-verification');\n  } // Input onChange handler\n\n\n  var handleOnChange = function handleOnChange(e) {\n    var currentValue = e.target.value;\n    setState(_objectSpread({}, state, {\n      value: currentValue\n    }));\n    onUpdate(currentValue);\n  }; // Init variable for Label For and Input element\n\n\n  var htmlFor, inputElement; // Make Label value to htmlFor\n\n  if (label) {\n    htmlFor = label.replace(/\\s+/g, '_').toLowerCase();\n  } // set icon position\n\n\n  var position = iconPosition || 'left';\n\n  var SearchIcon = searchIcon && __jsx(\"span\", {\n    className: \"\".concat(position === 'right' ? 'right' : 'left', \" search-icon\"),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 5\n    }\n  }, searchIcon);\n\n  var withSearchIconClass = searchIcon && position === 'right' ? 'icon-right' : position === 'left' ? 'icon-left' : ''; // Label Field\n\n  var LabelField = label && __jsx(\"label\", {\n    htmlFor: htmlFor,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 5\n    }\n  }, __jsx(FormattedMessage, {\n    id: intlInputLabelId ? intlInputLabelId : 'defaultIntlInputLabelId',\n    defaultMessage: label,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }\n  })); // Set Input element based on type prop\n\n\n  switch (type) {\n    case 'textarea':\n      inputElement = __jsx(\"div\", {\n        className: \"inner-wrap\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 9\n        }\n      }, __jsx(FormattedMessage, {\n        id: intlPlaceholderId ? intlPlaceholderId : 'defaultIntlId',\n        defaultMessage: \"\\xA0\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }\n      }, function (placeholder) {\n        return __jsx(\"textarea\", _extends({\n          id: htmlFor,\n          name: name,\n          disabled: disabled,\n          value: value ? value : state.value,\n          onChange: handleOnChange,\n          placeholder: placeholder,\n          onBlur: onBlur,\n          onFocus: onFocus,\n          style: style\n        }, rest, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 15\n          }\n        }));\n      }));\n      break;\n\n    case 'number':\n      inputElement = __jsx(\"div\", {\n        className: \"inner-wrap\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 9\n        }\n      }, __jsx(FormattedMessage, {\n        id: intlPlaceholderId ? intlPlaceholderId : 'defaultIntlId',\n        defaultMessage: \"\\xA0\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }\n      }, function (placeholder) {\n        return __jsx(\"input\", _extends({\n          type: \"number\",\n          id: htmlFor,\n          name: name,\n          disabled: disabled,\n          value: value ? value : state.value,\n          onChange: handleOnChange,\n          placeholder: placeholder,\n          onBlur: onBlur,\n          onFocus: onFocus,\n          style: style\n        }, rest, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 15\n          }\n        }));\n      }), verification && __jsx(Fragment, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 13\n        }\n      }, verified ? __jsx(VerifiedLabel, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 17\n        }\n      }, __jsx(FormattedMessage, {\n        id: \"inputVerified\",\n        defaultMessage: \"Verified\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 19\n        }\n      })) : __jsx(VerificationButton, {\n        onClick: handleVerification,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 17\n        }\n      }, __jsx(FormattedMessage, {\n        id: \"inputSendVerification\",\n        defaultMessage: \"Send Verification\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 19\n        }\n      }))));\n      break;\n\n    case 'password':\n      inputElement = __jsx(\"div\", {\n        className: \"inner-wrap\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 9\n        }\n      }, __jsx(FormattedMessage, {\n        id: intlPlaceholderId ? intlPlaceholderId : 'defaultIntlId',\n        defaultMessage: \"\\xA0\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 11\n        }\n      }, function (placeholder) {\n        return __jsx(\"input\", {\n          type: \"password\",\n          id: htmlFor,\n          name: name,\n          disabled: disabled,\n          value: value ? value : state.value,\n          onChange: handleOnChange // placeholder={placeholder}\n          ,\n          onBlur: onBlur,\n          onFocus: onFocus,\n          style: style,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 15\n          }\n        });\n      }));\n      break;\n\n    case 'email':\n      inputElement = __jsx(\"div\", {\n        className: \"inner-wrap\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 9\n        }\n      }, __jsx(FormattedMessage, {\n        id: intlPlaceholderId ? intlPlaceholderId : 'defaultIntlId',\n        defaultMessage: \"\\xA0\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 11\n        }\n      }, function (placeholder) {\n        return __jsx(\"input\", _extends({\n          type: \"email\",\n          id: htmlFor,\n          name: name,\n          disabled: disabled,\n          value: value ? value : state.value,\n          onChange: handleOnChange,\n          placeholder: placeholder,\n          onBlur: onBlur,\n          onFocus: onFocus,\n          style: style\n        }, rest, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 15\n          }\n        }));\n      }));\n      break;\n\n    default:\n      inputElement = __jsx(\"div\", {\n        className: \"inner-wrap\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 9\n        }\n      }, position === 'left' && SearchIcon, __jsx(FormattedMessage, {\n        id: intlPlaceholderId ? intlPlaceholderId : 'defaultIntlId',\n        defaultMessage: \"\\xA0\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 11\n        }\n      }, function (placeholder) {\n        return __jsx(\"input\", _extends({\n          type: \"text\",\n          id: htmlFor,\n          name: name,\n          value: value ? value : state.value,\n          onChange: handleOnChange,\n          placeholder: placeholder,\n          onBlur: onBlur,\n          onFocus: onFocus,\n          style: style,\n          className: withSearchIconClass\n        }, rest, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 15\n          }\n        }));\n      }), position === 'right' && SearchIcon);\n      break;\n  }\n\n  return __jsx(InputWrapper, {\n    className: addAllClasses.join(' '),\n    style: containerStyle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 5\n    }\n  }, LabelField || secondaryComponent ? __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 9\n    }\n  }, LabelField, \" \", secondaryComponent) : '', inputElement);\n};\n\nexport default Input;","map":{"version":3,"sources":["C:/Users/USER/Desktop/pickbazar/packages/shop/components/Input/Input.tsx"],"names":["React","useState","Fragment","InputWrapper","VerifiedLabel","VerificationButton","FormattedMessage","Input","type","value","label","name","style","disabled","className","onUpdate","placeholder","intlPlaceholderId","intlInputLabelId","onBlur","onFocus","verification","verified","handleVerification","secondaryComponent","searchIcon","iconPosition","containerStyle","rest","state","setState","addAllClasses","push","handleOnChange","e","currentValue","target","htmlFor","inputElement","replace","toLowerCase","position","SearchIcon","withSearchIconClass","LabelField","join"],"mappings":"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","sourcesContent":["import React, { useState, Fragment } from 'react';\r\nimport InputWrapper, { VerifiedLabel, VerificationButton } from './Input.style';\r\nimport { FormattedMessage } from 'react-intl';\r\n\r\ntype InputProps = {\r\n  id?: any;\r\n  type?: 'text' | 'email' | 'password' | 'number' | 'textarea';\r\n  disabled?: boolean;\r\n  label?: string;\r\n  name?: string;\r\n  value?: any;\r\n  style?: React.CSSProperties;\r\n  containerStyle?: React.CSSProperties;\r\n  className?: string;\r\n  placeholder?: any;\r\n  intlPlaceholderId?: string;\r\n  intlInputLabelId?: string;\r\n  onUpdate: Function;\r\n  onBlur?: (e: any) => void;\r\n  onFocus?: (e: any) => void;\r\n  verification?: boolean; // this prop only for number field\r\n  verified?: boolean; // this prop only for number field\r\n  handleVerification?: (e: any) => void; // this prop only for number field\r\n  secondaryComponent?: React.ReactChild | React.ReactChildren; // this prop only for number field\r\n  searchIcon?: React.ReactNode;\r\n  iconPosition?: 'left' | 'right';\r\n};\r\n\r\nconst Input: React.FC<any> = ({\r\n  type,\r\n  value,\r\n  label,\r\n  name,\r\n  style,\r\n  disabled,\r\n  className,\r\n  onUpdate,\r\n  placeholder,\r\n  intlPlaceholderId,\r\n  intlInputLabelId,\r\n  onBlur,\r\n  onFocus,\r\n  verification, // this prop only for number field\r\n  verified, // this prop only for number field\r\n  handleVerification, // this prop only for number field\r\n  secondaryComponent,\r\n  searchIcon,\r\n  iconPosition,\r\n  containerStyle,\r\n  ...rest\r\n}) => {\r\n  // Input State\r\n  const [state, setState] = useState({\r\n    value: value,\r\n  });\r\n\r\n  // Add all classs to an array\r\n  const addAllClasses: string[] = ['field-wrapper'];\r\n\r\n  // className prop checking\r\n  if (className) {\r\n    addAllClasses.push(className);\r\n  }\r\n\r\n  // Add disabled class\r\n  if (disabled) {\r\n    addAllClasses.push('disabled');\r\n  }\r\n\r\n  // Add with search icon class\r\n  if (searchIcon) {\r\n    addAllClasses.push('with-search-icon');\r\n  }\r\n\r\n  if (verification) {\r\n    verified\r\n      ? addAllClasses.push('number-verified')\r\n      : addAllClasses.push('send-verification');\r\n  }\r\n\r\n  // Input onChange handler\r\n  const handleOnChange = (e: any) => {\r\n    let currentValue: any = e.target.value;\r\n    setState({\r\n      ...state,\r\n      value: currentValue,\r\n    });\r\n    onUpdate(currentValue);\r\n  };\r\n\r\n  // Init variable for Label For and Input element\r\n  let htmlFor, inputElement;\r\n\r\n  // Make Label value to htmlFor\r\n  if (label) {\r\n    htmlFor = label.replace(/\\s+/g, '_').toLowerCase();\r\n  }\r\n\r\n  // set icon position\r\n  const position: string = iconPosition || 'left';\r\n\r\n  const SearchIcon = searchIcon && (\r\n    <span className={`${position === 'right' ? 'right' : 'left'} search-icon`}>\r\n      {searchIcon}\r\n    </span>\r\n  );\r\n\r\n  const withSearchIconClass: string =\r\n    searchIcon && position === 'right'\r\n      ? 'icon-right'\r\n      : position === 'left'\r\n      ? 'icon-left'\r\n      : '';\r\n\r\n  // Label Field\r\n  const LabelField = label && (\r\n    <label htmlFor={htmlFor}>\r\n      <FormattedMessage\r\n        id={intlInputLabelId ? intlInputLabelId : 'defaultIntlInputLabelId'}\r\n        defaultMessage={label}\r\n      />\r\n    </label>\r\n  );\r\n\r\n  // Set Input element based on type prop\r\n  switch (type) {\r\n    case 'textarea':\r\n      inputElement = (\r\n        <div className='inner-wrap'>\r\n          <FormattedMessage\r\n            id={intlPlaceholderId ? intlPlaceholderId : 'defaultIntlId'}\r\n            defaultMessage='&nbsp;'\r\n          >\r\n            {(placeholder) => (\r\n              <textarea\r\n                id={htmlFor}\r\n                name={name}\r\n                disabled={disabled}\r\n                value={value ? value : state.value}\r\n                onChange={handleOnChange}\r\n                placeholder={placeholder}\r\n                onBlur={onBlur}\r\n                onFocus={onFocus}\r\n                style={style}\r\n                {...rest}\r\n              />\r\n            )}\r\n          </FormattedMessage>\r\n        </div>\r\n      );\r\n      break;\r\n\r\n    case 'number':\r\n      inputElement = (\r\n        <div className='inner-wrap'>\r\n          <FormattedMessage\r\n            id={intlPlaceholderId ? intlPlaceholderId : 'defaultIntlId'}\r\n            defaultMessage='&nbsp;'\r\n          >\r\n            {(placeholder) => (\r\n              <input\r\n                type='number'\r\n                id={htmlFor}\r\n                name={name}\r\n                disabled={disabled}\r\n                value={value ? value : state.value}\r\n                onChange={handleOnChange}\r\n                placeholder={placeholder}\r\n                onBlur={onBlur}\r\n                onFocus={onFocus}\r\n                style={style}\r\n                {...rest}\r\n              />\r\n            )}\r\n          </FormattedMessage>\r\n          {verification && (\r\n            <Fragment>\r\n              {verified ? (\r\n                <VerifiedLabel>\r\n                  <FormattedMessage\r\n                    id='inputVerified'\r\n                    defaultMessage='Verified'\r\n                  />\r\n                </VerifiedLabel>\r\n              ) : (\r\n                <VerificationButton onClick={handleVerification}>\r\n                  <FormattedMessage\r\n                    id='inputSendVerification'\r\n                    defaultMessage='Send Verification'\r\n                  />\r\n                </VerificationButton>\r\n              )}\r\n            </Fragment>\r\n          )}\r\n        </div>\r\n      );\r\n      break;\r\n\r\n    case 'password':\r\n      inputElement = (\r\n        <div className='inner-wrap'>\r\n          <FormattedMessage\r\n            id={intlPlaceholderId ? intlPlaceholderId : 'defaultIntlId'}\r\n            defaultMessage='&nbsp;'\r\n          >\r\n            {(placeholder) => (\r\n              <input\r\n                type='password'\r\n                id={htmlFor}\r\n                name={name}\r\n                disabled={disabled}\r\n                value={value ? value : state.value}\r\n                onChange={handleOnChange}\r\n                // placeholder={placeholder}\r\n                onBlur={onBlur}\r\n                onFocus={onFocus}\r\n                style={style}\r\n              />\r\n            )}\r\n          </FormattedMessage>\r\n        </div>\r\n      );\r\n      break;\r\n\r\n    case 'email':\r\n      inputElement = (\r\n        <div className='inner-wrap'>\r\n          <FormattedMessage\r\n            id={intlPlaceholderId ? intlPlaceholderId : 'defaultIntlId'}\r\n            defaultMessage='&nbsp;'\r\n          >\r\n            {(placeholder) => (\r\n              <input\r\n                type='email'\r\n                id={htmlFor}\r\n                name={name}\r\n                disabled={disabled}\r\n                value={value ? value : state.value}\r\n                onChange={handleOnChange}\r\n                placeholder={placeholder}\r\n                onBlur={onBlur}\r\n                onFocus={onFocus}\r\n                style={style}\r\n                {...rest}\r\n              />\r\n            )}\r\n          </FormattedMessage>\r\n        </div>\r\n      );\r\n      break;\r\n\r\n    default:\r\n      inputElement = (\r\n        <div className='inner-wrap'>\r\n          {position === 'left' && SearchIcon}\r\n          <FormattedMessage\r\n            id={intlPlaceholderId ? intlPlaceholderId : 'defaultIntlId'}\r\n            defaultMessage='&nbsp;'\r\n          >\r\n            {(placeholder) => (\r\n              <input\r\n                type='text'\r\n                id={htmlFor}\r\n                name={name}\r\n                value={value ? value : state.value}\r\n                onChange={handleOnChange}\r\n                placeholder={placeholder}\r\n                onBlur={onBlur}\r\n                onFocus={onFocus}\r\n                style={style}\r\n                className={withSearchIconClass}\r\n                {...rest}\r\n              />\r\n            )}\r\n          </FormattedMessage>\r\n          {position === 'right' && SearchIcon}\r\n        </div>\r\n      );\r\n      break;\r\n  }\r\n\r\n  return (\r\n    <InputWrapper className={addAllClasses.join(' ')} style={containerStyle}>\r\n      {LabelField || secondaryComponent ? (\r\n        <div>\r\n          {LabelField} {secondaryComponent}\r\n        </div>\r\n      ) : (\r\n        ''\r\n      )}\r\n      {inputElement}\r\n    </InputWrapper>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n"]},"metadata":{},"sourceType":"module"}