{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\pickbazar\\\\packages\\\\shop\\\\components\\\\TreeMenu\\\\TreeMenu.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport { usePrevious, useMeasure } from 'helper/hooks';\nimport { useSpring, animated } from 'react-spring';\nimport { Frame, Title, Content, Header, IconWrapper } from './TreeMenu.style';\nimport * as Icons from 'components/AllSvgIcon';\nconst Tree = React.memo(({\n  children,\n  name,\n  icon,\n  isOpen,\n  onClick,\n  depth,\n  defaultOpen = false\n}) => {\n  const previous = usePrevious(isOpen);\n  const [bind, {\n    height: viewHeight\n  }] = useMeasure();\n  const {\n    height,\n    opacity,\n    transform\n  } = useSpring({\n    from: {\n      height: 0,\n      opacity: 0,\n      transform: 'translate3d(20px,0,0)'\n    },\n    to: {\n      height: isOpen ? viewHeight : 0,\n      opacity: isOpen ? 1 : 0,\n      transform: `translate3d(${isOpen ? 0 : 20}px,0,0)`\n    }\n  });\n  const Icon = icon ? Icons[icon] : depth === 'child' ? Icons['Minus'] : null;\n  return __jsx(Frame, {\n    depth: depth,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }\n  }, __jsx(Header, {\n    open: isOpen,\n    depth: depth,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }\n  }, Icon !== null && __jsx(IconWrapper, {\n    depth: depth,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }\n  }, __jsx(Icon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 15\n    }\n  })), __jsx(Title, {\n    onClick: onClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 11\n    }\n  }, name)), __jsx(Content, {\n    style: {\n      opacity,\n      height: isOpen && previous === isOpen ? 'auto' : height\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }, __jsx(animated.div, _extends({\n    style: {\n      transform\n    }\n  }, bind, {\n    children: children,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 11\n    }\n  }))));\n});\nexport const TreeMenu = ({\n  data,\n  className,\n  onClick,\n  active\n}) => {\n  const handler = children => {\n    return children.map(subOption => {\n      if (!subOption.children) {\n        return __jsx(Tree, {\n          key: subOption.title,\n          name: subOption.title,\n          icon: subOption.icon,\n          depth: \"child\",\n          onClick: () => onClick(subOption.slug),\n          isOpen: active === subOption.slug,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 11\n          }\n        });\n      }\n\n      return __jsx(Tree, {\n        key: subOption.title,\n        name: subOption.title,\n        icon: subOption.icon,\n        depth: \"parent\",\n        onClick: () => onClick(subOption.slug),\n        isOpen: active === subOption.slug || subOption.children.some(children => children.slug === active),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 9\n        }\n      }, handler(subOption.children));\n    });\n  };\n\n  return __jsx(React.Fragment, null, handler(data));\n};","map":{"version":3,"sources":["C:/Users/USER/Desktop/pickbazar/packages/shop/components/TreeMenu/TreeMenu.tsx"],"names":["React","usePrevious","useMeasure","useSpring","animated","Frame","Title","Content","Header","IconWrapper","Icons","Tree","memo","children","name","icon","isOpen","onClick","depth","defaultOpen","previous","bind","height","viewHeight","opacity","transform","from","to","Icon","TreeMenu","data","className","active","handler","map","subOption","title","slug","some"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { usePrevious, useMeasure } from 'helper/hooks';\r\nimport { useSpring, animated } from 'react-spring';\r\nimport { Frame, Title, Content, Header, IconWrapper } from './TreeMenu.style';\r\nimport * as Icons from 'components/AllSvgIcon';\r\nconst Tree = React.memo(\r\n  ({\r\n    children,\r\n    name,\r\n    icon,\r\n    isOpen,\r\n    onClick,\r\n    depth,\r\n    defaultOpen = false,\r\n  }: any) => {\r\n    const previous = usePrevious(isOpen);\r\n    const [bind, { height: viewHeight }] = useMeasure();\r\n    const { height, opacity, transform } = useSpring<any>({\r\n      from: { height: 0, opacity: 0, transform: 'translate3d(20px,0,0)' },\r\n      to: {\r\n        height: isOpen ? viewHeight : 0,\r\n        opacity: isOpen ? 1 : 0,\r\n        transform: `translate3d(${isOpen ? 0 : 20}px,0,0)`,\r\n      },\r\n    });\r\n    const Icon = icon ? Icons[icon] : depth === 'child' ? Icons['Minus'] : null;\r\n    return (\r\n      <Frame depth={depth}>\r\n        <Header open={isOpen} depth={depth}>\r\n          {Icon !== null && (\r\n            <IconWrapper depth={depth}>\r\n              <Icon />\r\n            </IconWrapper>\r\n          )}\r\n          <Title onClick={onClick}>{name}</Title>\r\n        </Header>\r\n        <Content\r\n          style={{\r\n            opacity,\r\n            height: isOpen && previous === isOpen ? 'auto' : height,\r\n          }}\r\n        >\r\n          <animated.div style={{ transform }} {...bind} children={children} />\r\n        </Content>\r\n      </Frame>\r\n    );\r\n  }\r\n);\r\n\r\ntype Props = {\r\n  className?: any;\r\n  data: any;\r\n  onClick: (slug: string) => void;\r\n  active: string | string[];\r\n};\r\nexport const TreeMenu: React.FC<Props> = ({\r\n  data,\r\n  className,\r\n  onClick,\r\n  active,\r\n}) => {\r\n  const handler = (children) => {\r\n    return children.map((subOption) => {\r\n      if (!subOption.children) {\r\n        return (\r\n          <Tree\r\n            key={subOption.title}\r\n            name={subOption.title}\r\n            icon={subOption.icon}\r\n            depth='child'\r\n            onClick={() => onClick(subOption.slug)}\r\n            isOpen={active === subOption.slug}\r\n          />\r\n        );\r\n      }\r\n      return (\r\n        <Tree\r\n          key={subOption.title}\r\n          name={subOption.title}\r\n          icon={subOption.icon}\r\n          depth='parent'\r\n          onClick={() => onClick(subOption.slug)}\r\n          isOpen={\r\n            active === subOption.slug ||\r\n            subOption.children.some((children) => children.slug === active)\r\n          }\r\n        >\r\n          {handler(subOption.children)}\r\n        </Tree>\r\n      );\r\n    });\r\n  };\r\n  return <>{handler(data)}</>;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}