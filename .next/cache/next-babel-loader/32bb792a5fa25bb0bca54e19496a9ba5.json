{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\pickbazar\\\\packages\\\\shop\\\\containers\\\\Sidebar\\\\Sidebar.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useContext } from 'react';\nimport { useRouter } from 'next/router';\nimport Link from 'next/link';\nimport { useQuery } from '@apollo/react-hooks';\nimport Sticky from 'react-stickynode';\nimport { Scrollbars } from 'react-custom-scrollbars';\nimport Popover from 'components/Popover/Popover';\nimport { ArrowDropDown, CategoryIcon } from 'components/AllSvgIcon';\nimport { SearchContext } from 'contexts/search/search.context';\nimport { useLocale } from 'contexts/language/language.provider';\nimport { useStickyState } from 'contexts/app/app.provider';\nimport { SidebarMobileLoader, SidebarLoader } from 'components/Placeholder/Placeholder';\nimport { FormattedMessage } from 'react-intl';\nimport { CategoryWrapper, TreeWrapper, PopoverHandler, PopoverWrapper, SidebarWrapper, RequestMedicine } from './Sidebar.style';\nimport { TreeMenu } from 'components/TreeMenu/TreeMenu';\nimport { GET_CATEGORIES } from 'graphql/query/category.query';\nimport { REQUEST_MEDICINE_PAGE } from 'constants/navigation';\n\nconst SidebarCategory = ({\n  deviceType: {\n    mobile,\n    tablet,\n    desktop\n  },\n  type\n}) => {\n  const {\n    state,\n    dispatch\n  } = useContext(SearchContext);\n  const router = useRouter();\n  const {\n    pathname,\n    query\n  } = router;\n  const {\n    data,\n    loading\n  } = useQuery(GET_CATEGORIES, {\n    variables: {\n      type\n    }\n  });\n  const selectedQueries = query.category;\n  const {\n    isRtl\n  } = useLocale();\n\n  const handleCategorySelection = slug => {\n    const updatedQuery = state.text ? {\n      text: state.text,\n      category: slug\n    } : {\n      category: slug\n    };\n    router.push({\n      pathname: pathname,\n      query: updatedQuery\n    });\n  };\n\n  const isSidebarSticky = useStickyState('isSidebarSticky');\n\n  if (!data || loading) {\n    if (mobile || tablet) {\n      return __jsx(SidebarMobileLoader, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 14\n        }\n      });\n    }\n\n    return __jsx(SidebarLoader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 12\n      }\n    });\n  }\n\n  return __jsx(CategoryWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }\n  }, __jsx(PopoverWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }, __jsx(Popover, {\n    handler: __jsx(PopoverHandler, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }\n    }, __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 15\n      }\n    }, __jsx(CategoryIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }\n    }), \"Select your Category\"), __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 15\n      }\n    }, __jsx(ArrowDropDown, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }\n    }))),\n    className: \"category-popover\",\n    content: __jsx(React.Fragment, null, type === 'medicine' && __jsx(Link, {\n      href: REQUEST_MEDICINE_PAGE,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }\n    }, __jsx(RequestMedicine, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 19\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"reqMedicine\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 21\n      }\n    }))), __jsx(TreeMenu, {\n      data: data.categories,\n      onClick: handleCategorySelection,\n      active: selectedQueries,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 15\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  })), __jsx(SidebarWrapper, {\n    style: {\n      paddingTop: type === 'medicine' ? 0 : 45\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }\n  }, __jsx(Sticky, {\n    enabled: isSidebarSticky,\n    top: type === 'medicine' ? 89 : 110,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }\n  }, type === 'medicine' && __jsx(Link, {\n    href: REQUEST_MEDICINE_PAGE,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }\n  }, __jsx(RequestMedicine, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 15\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"reqMedicine\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 17\n    }\n  }))), __jsx(Scrollbars, {\n    universal: true,\n    autoHide: true,\n    autoHeight: true,\n    autoHeightMax: 688,\n    renderView: props => __jsx(\"div\", _extends({}, props, {\n      style: _objectSpread({}, props.style, {\n        marginLeft: isRtl ? props.style.marginRight : 0,\n        marginRight: isRtl ? 0 : props.style.marginRight\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 15\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 11\n    }\n  }, __jsx(TreeWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }\n  }, __jsx(TreeMenu, {\n    data: data.categories,\n    onClick: handleCategorySelection,\n    active: selectedQueries,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 15\n    }\n  }))))));\n};\n\nexport default SidebarCategory;","map":{"version":3,"sources":["C:/Users/USER/Desktop/pickbazar/packages/shop/containers/Sidebar/Sidebar.tsx"],"names":["React","useContext","useRouter","Link","useQuery","Sticky","Scrollbars","Popover","ArrowDropDown","CategoryIcon","SearchContext","useLocale","useStickyState","SidebarMobileLoader","SidebarLoader","FormattedMessage","CategoryWrapper","TreeWrapper","PopoverHandler","PopoverWrapper","SidebarWrapper","RequestMedicine","TreeMenu","GET_CATEGORIES","REQUEST_MEDICINE_PAGE","SidebarCategory","deviceType","mobile","tablet","desktop","type","state","dispatch","router","pathname","query","data","loading","variables","selectedQueries","category","isRtl","handleCategorySelection","slug","updatedQuery","text","push","isSidebarSticky","categories","paddingTop","props","style","marginLeft","marginRight"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react';\r\nimport { useRouter } from 'next/router';\r\nimport Link from 'next/link';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport Sticky from 'react-stickynode';\r\nimport { Scrollbars } from 'react-custom-scrollbars';\r\nimport Popover from 'components/Popover/Popover';\r\nimport { ArrowDropDown, CategoryIcon } from 'components/AllSvgIcon';\r\nimport { SearchContext } from 'contexts/search/search.context';\r\nimport { useLocale } from 'contexts/language/language.provider';\r\nimport { useStickyState } from 'contexts/app/app.provider';\r\nimport {\r\n  SidebarMobileLoader,\r\n  SidebarLoader,\r\n} from 'components/Placeholder/Placeholder';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport {\r\n  CategoryWrapper,\r\n  TreeWrapper,\r\n  PopoverHandler,\r\n  PopoverWrapper,\r\n  SidebarWrapper,\r\n  RequestMedicine,\r\n  Loading,\r\n} from './Sidebar.style';\r\n\r\nimport { TreeMenu } from 'components/TreeMenu/TreeMenu';\r\n\r\nimport { GET_CATEGORIES } from 'graphql/query/category.query';\r\n\r\nimport { REQUEST_MEDICINE_PAGE } from 'constants/navigation';\r\n\r\ntype SidebarCategoryProps = {\r\n  deviceType: {\r\n    mobile: string;\r\n    tablet: string;\r\n    desktop: boolean;\r\n  };\r\n  type: string;\r\n};\r\n\r\nconst SidebarCategory: React.FC<SidebarCategoryProps> = ({\r\n  deviceType: { mobile, tablet, desktop },\r\n  type,\r\n}) => {\r\n  const { state, dispatch } = useContext(SearchContext);\r\n  const router = useRouter();\r\n  const { pathname, query } = router;\r\n  const { data, loading } = useQuery(GET_CATEGORIES, {\r\n    variables: { type },\r\n  });\r\n  const selectedQueries = query.category;\r\n\r\n  const { isRtl } = useLocale();\r\n\r\n  const handleCategorySelection = (slug: string) => {\r\n    const updatedQuery = state.text\r\n      ? { text: state.text, category: slug }\r\n      : { category: slug };\r\n    router.push({\r\n      pathname: pathname,\r\n      query: updatedQuery,\r\n    });\r\n  };\r\n  const isSidebarSticky = useStickyState('isSidebarSticky');\r\n\r\n  if (!data || loading) {\r\n    if (mobile || tablet) {\r\n      return <SidebarMobileLoader />;\r\n    }\r\n\r\n    return <SidebarLoader />;\r\n  }\r\n\r\n  return (\r\n    <CategoryWrapper>\r\n      <PopoverWrapper>\r\n        <Popover\r\n          handler={\r\n            <PopoverHandler>\r\n              <div>\r\n                <CategoryIcon />\r\n                Select your Category\r\n              </div>\r\n              <div>\r\n                <ArrowDropDown />\r\n              </div>\r\n            </PopoverHandler>\r\n          }\r\n          className='category-popover'\r\n          content={\r\n            <>\r\n              {type === 'medicine' && (\r\n                <Link href={REQUEST_MEDICINE_PAGE}>\r\n                  <RequestMedicine>\r\n                    <FormattedMessage id='reqMedicine' />\r\n                  </RequestMedicine>\r\n                </Link>\r\n              )}\r\n              <TreeMenu\r\n                data={data.categories}\r\n                onClick={handleCategorySelection}\r\n                active={selectedQueries}\r\n              />\r\n            </>\r\n          }\r\n        />\r\n      </PopoverWrapper>\r\n\r\n      <SidebarWrapper style={{ paddingTop: type === 'medicine' ? 0 : 45 }}>\r\n        <Sticky enabled={isSidebarSticky} top={type === 'medicine' ? 89 : 110}>\r\n          {type === 'medicine' && (\r\n            <Link href={REQUEST_MEDICINE_PAGE}>\r\n              <RequestMedicine>\r\n                <FormattedMessage id='reqMedicine' />\r\n              </RequestMedicine>\r\n            </Link>\r\n          )}\r\n\r\n          <Scrollbars\r\n            universal\r\n            autoHide\r\n            autoHeight\r\n            autoHeightMax={688}\r\n            renderView={(props) => (\r\n              <div\r\n                {...props}\r\n                style={{\r\n                  ...props.style,\r\n                  marginLeft: isRtl ? props.style.marginRight : 0,\r\n                  marginRight: isRtl ? 0 : props.style.marginRight,\r\n                }}\r\n              />\r\n            )}\r\n          >\r\n            <TreeWrapper>\r\n              <TreeMenu\r\n                data={data.categories}\r\n                onClick={handleCategorySelection}\r\n                active={selectedQueries}\r\n              />\r\n            </TreeWrapper>\r\n          </Scrollbars>\r\n        </Sticky>\r\n      </SidebarWrapper>\r\n    </CategoryWrapper>\r\n  );\r\n};\r\n\r\nexport default SidebarCategory;\r\n"]},"metadata":{},"sourceType":"module"}